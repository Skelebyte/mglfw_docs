{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n</code></pre>"},{"location":"#test","title":"test","text":""},{"location":"blog/2025/02/12/hello-world/","title":"Hello world!","text":"<p>...</p>"},{"location":"documentation/","title":"Introduction","text":""},{"location":"documentation/#what-is-mglfw","title":"What is MGLFW?","text":"<p>MGLFW (or Minimal GLFW) is a wrapper for the glfw-rs crate. It aims to make using GLFW easier.</p>"},{"location":"documentation/#example","title":"Example","text":"<p>This is the standard window example provided on the crates.io page. <pre><code>extern crate glfw;\n\nuse glfw::{Action, Context, Key};\n\nfn main() {\n    let mut glfw = glfw::init(glfw::fail_on_errors).unwrap();\n\n    let (mut window, events) = glfw.create_window(300, 300, \"Hello this is window\", glfw::WindowMode::Windowed)\n        .expect(\"Failed to create GLFW window.\");\n\n    window.set_key_polling(true);\n    window.make_current();\n\n    while !window.should_close() {\n        glfw.poll_events();\n        for (_, event) in glfw::flush_messages(&amp;events) {\n            handle_window_event(&amp;mut window, event);\n        }\n    }\n}\n\nfn handle_window_event(window: &amp;mut glfw::Window, event: glfw::WindowEvent) {\n    match event {\n        glfw::WindowEvent::Key(Key::Escape, _, Action::Press, _) =&gt; {\n            window.set_should_close(true)\n        }\n        _ =&gt; {}\n    }\n}\n</code></pre></p> <p>And this is the same example, but using MGLFW. <pre><code>mod mglfw;\nuse mglfw::{core, input};\n\nfn main() {\n    let mut mglfw = core::Mglfw::new(\"Hello, MGLFW!\", 300, 300);\n    let mut input = input::Input::new();\n\n    let escape = input.new_keybind(input::KeyCode::Escape, input::Activation::Press);\n\n    while mglfw.is_running() {\n        mglfw.update();\n\n        if input.is_bind_active(&amp;mglfw, &amp;escape) {\n            mglfw.quit();\n        }\n    }\n}\n</code></pre></p>"},{"location":"documentation/#warnings","title":"Warnings","text":"<p>This is not ready for any proper use, I am just work on this a hobby project so updates will probably be infrequent and small.</p>"},{"location":"documentation/Getting%20Started/","title":"Getting Started","text":""},{"location":"documentation/Getting%20Started/#installation","title":"Installation","text":"<p>To install MGLFW, there is only 1 way. </p> <ol> <li>Go to the Github repository and choose the latest stable release.</li> <li>Move the <code>mglfw.rs</code> file into the <code>src</code> file of your rust project</li> <li>Run <code>cargo add glfw</code> or add <code>glfw = \"0.59.0\"</code> to your <code>Cargo.toml</code> file.</li> <li>Build the project to ensure everything is ok.</li> </ol>"},{"location":"documentation/Getting%20Started/#usage","title":"Usage","text":"<p>To use MGLFW, you need to add <code>mod mglfw;</code> to the top of your code (typically the <code>main.rs</code> file). main.rs<pre><code>mod mglfw;\n\nfn main() {\n    println!(\"Hi mum!\");\n}\n</code></pre></p> <p>Note</p> <p>You may want to compile here just to make sure everything is ok and you don't have errors.</p> <p>Now to start calling MGLFW functions you need to use the modules inside MGLFW. I would recommend using the <code>core</code> and <code>input</code> modules main.rs<pre><code>mod mglfw;\nuse mglfw::{core, input};\n\nfn main() {\n    println!(\"Hi mum!\");\n}\n</code></pre></p> <p>Note</p> <p>The <code>core</code> module contains everything related to window and glfw context creation, and is required for all other MGLFW modules.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/hello/","title":"Hello","text":""},{"location":"blog/category/world/","title":"World","text":""}]}